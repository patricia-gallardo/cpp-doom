name: CMake

env:
  VCPKG_BINARY_SOURCES: 'clear;nuget,GitHub,readwrite'


on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  workflow_dispatch:

jobs:
  build:
    name: "${{ matrix.configurations.name }} | ${{ matrix.cmake-build-target }} |  ${{ matrix.cmake-build-type }}"
    runs-on: ${{ matrix.configurations.os }}
    strategy:
      fail-fast: false
      matrix:
        configurations:
          - name: Ubuntu 20.04 Clang
            os: ubuntu-20.04
            cmake_env:
              CC: clang-12
              CXX: clang++-12
            cmake_platform_option: ""
            cache_name: "ubuntu-clang"
          - name: Ubuntu 20.04 GCC
            os: ubuntu-20.04
            cmake_env: {}
            cmake_platform_option: ""
            cache_name: "ubuntu-gcc"
          - name: 64 Windows 2022
            os: windows-2022
            cmake_env: {}
            cmake_platform_option: "-A x64"
            cache_name: "win64"
          - name: MacOS 11
            os: macos-11
            cmake_env: {}
            cmake_platform_option: ""
            cache_name: "macos"
          - name: 32 Windows 2022
            os: windows-2022
            cmake_env: {}
            cmake_platform_option: "-A Win32"
            cache_name: "win32"
        cmake-build-type: [Release]
        cmake-build-target: [opl, pcsound, crispy-doom, crispy-heretic, crispy-hexen, crispy-server, crispy-setup, crispy-strife, midiread, mus2mid, doom, heretic, hexen, setup, strife, textscreen]

    steps:
    - uses: actions/checkout@v2

    - name: Create vcpkg build folder
      run: |
        mkdir -p ${{runner.workspace}}/build/vcpkg_installed
        mkdir -p ${{runner.workspace}}/build/_deps

    - name: Cache vcpkg
      uses: actions/cache@v2
      env:
        cache-name: vcpkg-modules
      with:
        path: |
          ${{runner.workspace}}/build/vcpkg_installed
          ${{runner.workspace}}/build/_deps
        key: ${{ matrix.configurations.os }}-${{ matrix.configurations.cache_name }}-${{ matrix.cmake-build-type }}-${{ hashFiles('vcpkg.json') }}-${{ hashFiles('cmake/vcpkg.cmake') }}

#    - name: Fix Path on Ubuntu
#      if: matrix.configurations.os == 'ubuntu-20.04'
#      run: echo "/home/runner/.local/bin" >> $GITHUB_PATH

    - name: Install Linux dependencies
      if: matrix.configurations.os == 'ubuntu-20.04'
      run: sudo apt-get update && sudo apt-get install -y libx11-dev libxrandr-dev libxi-dev libgl1-mesa-dev libudev-dev clang-12 make ninja-build cmake

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      working-directory: ${{runner.workspace}}/build
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{ matrix.cmake-build-type }} ${{ matrix.configurations.cmake_platform_option }}
      env: ${{ matrix.configurations.cmake_env }}

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config ${{ matrix.cmake-build-type }} --target ${{ matrix.cmake-build-target }}
      env: ${{ matrix.configurations.cmake_env }}

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{ matrix.cmake-build-type }}
